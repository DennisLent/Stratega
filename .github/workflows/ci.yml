name: CI

on: [ push ]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows Latest MSVC",
            artifact: "Windows-MSVC.tar.xz",
            os: windows-latest,
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
          - {
            name: "Windows Latest MinGW",
            artifact: "Windows-MinGW.tar.xz",
            os: windows-latest,
            build_type: "Release",
            cc: "gcc",
            cxx: "g++"
          }
          - {
            name: "Ubuntu 20.04 GCC-10",
            artifact: "Ubuntu2004-GCC10.tar.xz",
            os: ubuntu-20.04,
            build_type: "Release",
            cc: "gcc-10",
            cxx: "g++-10"
          }
          - {
            name: "Ubuntu 20.04 GCC-11",
            artifact: "Ubuntu2004-GCC11.tar.xz",
            os: ubuntu-20.04,
            build_type: "Release",
            cc: "gcc-11",
            cxx: "g++-11"
          }
          - {
            name: "Ubuntu 18.04 GCC-10",
            artifact: "Ubuntu1804-GCC10.tar.xz",
            os: ubuntu-18.04,
            build_type: "Release",
            cc: "gcc-10",
            cxx: "g++-10"
          }
          - {
            name: "Ubuntu 18.04 GCC-11",
            artifact: "Ubuntu1804-GCC11.tar.xz",
            os: ubuntu-18.04,
            build_type: "Release",
            cc: "gcc-11",
            cxx: "g++-11"
          }
          - {
            name: "macOS Latest Clang",
            artifact: "macOS.tar.xz",
            os: macos-latest,
            build_type: "Release",
            cc: "clang",
            cxx: "clang++"
          }

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'

      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.9
        with:
          cmake-version: '3.20'

      - name: Install conan
        shell: bash
        run: |
          python3 -m pip install --upgrade pip setuptools
          python3 -m pip install conan

      - name: Source profile
        if: runner.os == 'Linux'
        shell: bash
        run: source ~/.profile

      - name: ls
        shell: bash
        run: ls

      - name: Create Build Environment
        # no in-source building, so create a separate build directory
        # use this as working directory for all subsequent commands
        run: |
          cmake -E make_directory ${{runner.workspace}}/build -DWARNINGS_AS_ERRORS=TRUE
      - name: print
        working-directory: ${{runner.workspace}}/build
        run: ls
      - name: make stratega
        working-directory: ${{runner.workspace}}/build
        run: make stratega

      - name: make gui
        working-directory: ${{runner.workspace}}/build
        run: make gui

      - name: make arena
        working-directory: ${{runner.workspace}}/build
        run: make arena

      - name: make tests
        working-directory: ${{runner.workspace}}/build
        run: make tests

      - name: run tests
        working-directory: ${{runner.workspace}}/build
        run: test/tests


