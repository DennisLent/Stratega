
name: CI

on: [ push, pull_request ]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            build_type: "Release",
            cc: cl,
            cxx: cl,
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
          - {
            name: "Windows Latest MinGW",
            os: windows-latest,
            build_type: "Release",
            cc: gcc,
            cxx: g++
          }
          - {
            name: "Ubuntu 20.04 GCC-10",
            os: ubuntu-20.04,
            build_type: "Release",
            cc: gcc-10,
            cxx: g++-10
          }
          - {
                name: "Ubuntu 20.04 GCC-9",
                  os: ubuntu-20.04,
                  build_type: "Release",
                  cc: gcc-9,
                  cxx: g++-9
          }
          # GCC-11 not yet (easily) available on GitHub Action, uncomment once this has changed.
#          - {
#            name: "Ubuntu 20.04 GCC-11",
#            os: ubuntu-20.04,
#            build_type: "Release",
#            cc: gcc-11,
#            cxx: g++-11
#          }
          - {
            name: "Ubuntu 18.04 GCC-9",
            os: ubuntu-18.04,
            build_type: "Release",
            cc: gcc-9,
            cxx: g++-9
          }
          - {
            name: "Ubuntu 18.04 GCC-10",
            os: ubuntu-18.04,
            build_type: "Release",
            cc: gcc-10,
            cxx: g++-10
          }
          # GCC-11 not yet (easily) available on GitHub Action, uncomment once this has changed.
#          - {
#            name: "Ubuntu 18.04 GCC-11",
#            os: ubuntu-18.04,
#            build_type: "Release",
#            cc: gcc-11,
#            cxx: g++-11
#          }
          - {
            name: "macOS Latest Clang",
            os: macos-latest,
            build_type: "Release",
            cc: clang,
            cxx: clang++
          }

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'

      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Setup pytest annotations
        run: |
          python -m pip install pytest-github-actions-annotate-failures

      - name: Setup GCC annotations
        uses: ammaraskar/gcc-problem-matcher@master

      - name: Setup MSVC annotations
        uses: ammaraskar/msvc-problem-matcher@master

      - name: Install conan
        shell: bash
        run: |
          python3 -m pip install --upgrade pip setuptools
          python3 -m pip install conan

      - name: Source profile
        if: runner.os == 'Linux'
        shell: bash
        run: source ~/.profile

      - name: Install linux dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get clean && sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            libpthread-stubs0-dev \
            libgl1-mesa-dev \
            libx11-dev \
            libxrandr-dev \
            libfreetype6-dev \
            libglew1.5-dev \
            libjpeg8-dev \
            libsndfile1-dev \
            libopenal-dev \
            libasound2-dev \
            libudev-dev

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.9
        with:
          cmake-version: '3.20'

      - name: Use cmake
        run: cmake --version

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }}
        run: >
          cmake
          -S .
          -B ./build
          -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
          -DWARNINGS_AS_ERRORS=FALSE

      - name: make stratega
        working-directory: ./build
        run: make stratega

      - name: make gui
        working-directory: ./build
        run: make gui

      - name: make arena
        working-directory: ./build
        run: make arena

      - name: make tests
        working-directory: ./build
        run: make tests

      - name: run tests
        working-directory: ./build
        run: test/tests

      - name: Run Tests
        shell: bash
        run: |
          GTEST_OUTPUT=xml:gtest-report-${{ matrix.config.name }}.xml GTEST_COLOR=1 ctest --test-dir ./build --verbose

      - name: Upload test results
        uses: actions/upload-artifact@v2
        if: success()
        with:
          name: test_results_xml
          path: build/test-results/**/*.xml

      - name: Upload test results
        uses: actions/upload-artifact@v2
        if: success()
        with:
          name: test_results_xml
          path: ./build/**/gtest-report-${{ matrix.config.name }}.xml
